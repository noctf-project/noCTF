<script lang="ts">
  import api from "$lib/api/index.svelte";
  import { toasts } from "$lib/stores/toast";
  import { performRedirect } from "$lib/utils/url";
  import Icon from "@iconify/svelte";
  import { onMount } from "svelte";
  
  // Flow stages
  type FlowStage = "email" | "login" | "register" | "verification-sent";
  let currentStage: FlowStage = $state("email");
  
  // Form fields
  let email = $state("");
  let name = $state("");
  let password = $state("");
  let confirmPassword = $state("");
  let rememberMe = $state(true);
  
  // UI states
  let isLoading = $state(false);
  let passwordVisible = $state(false);
  let passwordStrength = $state(0);
  let registrationToken = $state("");
  let emailVerificationEnabled = $state(true); // This should be set based on your config
  
  // URL params
  let urlParams = new URLSearchParams(window.location.search);
  let clientId = urlParams.get("client_id");
  let redirectParam = urlParams.get("redirect_to");
  
  onMount(() => {
    // Could load verification config here
    // api.GET("/auth/config").then(res => {
    //   emailVerificationEnabled = res.data?.emailVerificationEnabled ?? true;
    // });
  });
  
  function successRedirect() {
    if (redirectParam) {
      performRedirect(redirectParam);
    } else {
      window.location.replace("/");
    }
  }
  
  function goBack() {
    if (currentStage === "login" || currentStage === "register" || currentStage === "verification-sent") {
      currentStage = "email";
      // Reset sensitive fields when going back
      password = "";
      confirmPassword = "";
    }
  }
  
  function checkPasswordStrength(pass: string) {
    if (!pass) return 0;
    
    let score = 0;
    // Length check
    if (pass.length >= 8) score += 1;
    if (pass.length >= 12) score += 1;
    
    // Complexity checks
    if (/[A-Z]/.test(pass)) score += 1;
    if (/[0-9]/.test(pass)) score += 1;
    if (/[^A-Za-z0-9]/.test(pass)) score += 1;
    
    passwordStrength = Math.min(score, 5);
    return score;
  }
  
  async function handleEmailCheck() {
    if (!email) return;
    
    try {
      isLoading = true;
      
      // Check if the email exists
      const checkEmailReq = await api.POST("/auth/email/init", {
        body: { email },
      });
      
      if (checkEmailReq.error) {
        toasts.error(checkEmailReq.error.message);
        isLoading = false;
        return;
      }
      console.log(checkEmailReq)
      
      // Handle different responses based on if email exists
      if (checkEmailReq.data && Object.keys(checkEmailReq.data.data || {}).length === 0) {
        // Email exists, proceed to login
        currentStage = "login";
      } else if (checkEmailReq.data?.data?.token) {
        // New user, store token for registration
        registrationToken = checkEmailReq.data.data.token;
        
        if (emailVerificationEnabled) {
          // If email verification is enabled, show verification message
          currentStage = "verification-sent";
        } else {
          // If email verification is disabled, go to registration form
          currentStage = "register";
        }
      } else {
        // Unexpected response
        toasts.error("Unexpected response from server");
      }
    } catch (error) {
      toasts.error("An error occurred during email check");
      console.error(error);
    } finally {
      isLoading = false;
    }
  }
  
  async function handleSocialLogin(provider: string) {
    // Redirect to social login provider
    window.location.href = `/auth/${provider}/init?redirect_to=${encodeURIComponent(redirectParam || '/')}`;
  }
  
  async function handleLogin() {
    try {
      isLoading = true;
      
      const loginReq = await api.POST("/auth/email/finish", {
        body: {
          email,
          password,
          remember: rememberMe
        },
      });
      
      if (loginReq.error) {
        toasts.error(loginReq.error.message);
        isLoading = false;
        return;
      }
      
      if (loginReq.data?.data?.type === "session") {
        successRedirect();
      } else {
        toasts.error("Login failed");
      }
    } catch (error) {
      toasts.error("An error occurred during login");
      console.error(error);
    } finally {
      isLoading = false;
    }
  }
  
  async function handleRegister() {
    try {
      isLoading = true;
      
      // Password validation
      if (password !== confirmPassword) {
        toasts.error("Passwords do not match");
        isLoading = false;
        return;
      }
      
      if (checkPasswordStrength(password) < 3) {
        toasts.error("Password is too weak");
        isLoading = false;
        return;
      }
      
      const registerReq = await api.POST("/auth/register/finish", {
        body: {
          token: registrationToken,
          name,
          email,
          password,
          captcha: "",
        },
      });
      
      if (registerReq.error) {
        toasts.error(registerReq.error.message);
        isLoading = false;
        return;
      }
      
      if (registerReq.data?.data?.type === "session") {
        toasts.success("Account created successfully!");
        successRedirect();
      } else {
        toasts.error("Registration failed");
      }
    } catch (error) {
      toasts.error("An error occurred during registration");
      console.error(error);
    } finally {
      isLoading = false;
    }
  }
  
  function handleSubmit(e: Event) {
    e.preventDefault();
    
    switch (currentStage) {
      case "email":
        handleEmailCheck();
        break;
      case "login":
        handleLogin();
        break;
      case "register":
        handleRegister();
        break;
      default:
        break;
    }
  }
</script>

<div class="h-full flex flex-col gap-8 items-center justify-center p-4">
  {#if clientId}
    <h2 class="text-xl text-center">
      Log in to grant access to <span class="font-bold">{clientId}</span>
    </h2>
  {/if}
  
  <div class="card w-full max-w-md bg-base-100 shadow-solid border border-base-500">
    <div class="card-body">
      <!-- Header changes based on stage -->
      <div class="text-center mb-6">
        {#if currentStage === "email"}
          <h2 class="text-2xl font-bold">Welcome</h2>
          <p class="text-gray-600">Sign in or create an account</p>
        {:else if currentStage === "login"}
          <h2 class="text-2xl font-bold">Welcome back</h2>
          <p class="text-gray-600">Enter your password to continue</p>
        {:else if currentStage === "register"}
          <h2 class="text-2xl font-bold">Create an account</h2>
          <p class="text-gray-600">Complete your details to get started</p>
        {:else if currentStage === "verification-sent"}
          <h2 class="text-2xl font-bold">Check your email</h2>
          <p class="text-gray-600">We've sent a verification link</p>
        {/if}
      </div>
      
      <!-- Email entry stage -->
      {#if currentStage === "email"}
        <form onsubmit={handleSubmit}>
          <div class="form-control">
            <label for="email" class="label">
              <span class="label-text">Email</span>
            </label>
            <input
              id="email"
              type="email"
              placeholder="email@example.com"
              class="input input-bordered w-full"
              bind:value={email}
              required
              autocomplete="email"
            />
          </div>
          
          <button class="btn btn-primary w-full mt-6 shadow-solid" type="submit" disabled={isLoading || !email}>
            {#if isLoading}
              <span class="loading loading-spinner loading-sm"></span>
            {:else}
              Continue
            {/if}
          </button>
        </form>
        
        <!-- Social login buttons -->
        <div class="divider text-sm text-gray-500 my-6">OR</div>
        
        <div class="flex flex-col gap-3">
          <button class="btn btn-outline w-full" onclick={() => handleSocialLogin('google')}>
            Continue with Google
          </button>
          <button class="btn btn-outline w-full" onclick={() => handleSocialLogin('github')}>
            Continue with GitHub
          </button>
        </div>
      {/if}
      
      <!-- Login stage -->
{#if currentStage === "login"}
  <form onsubmit={handleSubmit}>
    <div class="form-control">
      <label for="email-locked" class="label">
        <span class="label-text">Email</span>
      </label>
      <div class="relative">
        <input
          id="email-locked"
          type="email"
          class="input input-bordered w-full pr-10 bg-base-200"
          value={email}
          disabled
        />
        <button 
          type="button"
          class="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-500"
          onclick={goBack}
          title="Change email"
        >
          <Icon icon="material-symbols:edit" class="text-3xl" />
        </button>
      </div>
    </div>
    
    <div class="form-control mt-4">
      <div class="flex justify-between">
        <label for="password" class="label">
          <span class="label-text">Password</span>
        </label>
        
      </div>
      <div class="relative">
        <input
          id="password"
          type={passwordVisible ? "text" : "password"}
          placeholder="••••••••"
          class="input input-bordered w-full pr-10"
          bind:value={password}
          required
          autocomplete="current-password"
        />
        <button 
          type="button"
          class="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-500"
          onclick={() => passwordVisible = !passwordVisible}
        >
          {#if passwordVisible}
            <Icon icon="material-symbols:visibility" class="text-3xl" />
          {:else}
            <Icon icon="material-symbols:visibility" class="text-3xl" />
          {/if}
        </button>
      </div>
    </div>
    
    <div class="flex justify-between items-center">

    <div class="form-control">
      <label class="cursor-pointer label justify-start">
        <input type="checkbox" class="checkbox checkbox-sm mr-2" bind:checked={rememberMe} />
        <span class="label-text">Remember me</span>
      </label>
    </div>
    <a href="/auth/reset-password" class="text-xs link link-hover self-end">
        Forgot password?
    </a>
        </div>
    
    <button class="btn btn-primary w-full mt-6 shadow-solid" type="submit" disabled={isLoading}>
      {#if isLoading}
        <span class="loading loading-spinner loading-sm"></span>
      {:else}
        Sign In
      {/if}
    </button>
  </form>
{/if}
      
      <!-- Registration stage -->
      {#if currentStage === "register"}

          <form onsubmit={handleSubmit}>
    <div class="form-control">
      <label for="email-locked" class="label">
        <span class="label-text">Email</span>
      </label>
      <div class="relative">
        <input
          id="email-locked"
          type="email"
          class="input input-bordered w-full pr-10 bg-base-200"
          value={email}
          disabled
        />
        <button 
          type="button"
          class="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-500"
          onclick={goBack}
          title="Change email"
        >
          <Icon icon="material-symbols:edit" class="text-3xl" />
        </button>
      </div>
    </div>
          
          <div class="form-control mt-4">
            <label for="name" class="label">
              <span class="label-text">Name</span>
            </label>
            <input
              id="name"
              type="text"
              placeholder="Your name"
              class="input input-bordered w-full"
              bind:value={name}
              required
              autocomplete="name"
            />
          </div>
          
          <div class="form-control mt-4">
            <label for="password" class="label">
              <span class="label-text">Password</span>
            </label>
            <div class="relative">
              <input
                id="password"
                type={passwordVisible ? "text" : "password"}
                placeholder="••••••••"
                class="input input-bordered w-full pr-10"
                bind:value={password}
                oninput={() => checkPasswordStrength(password)}
                required
                autocomplete="new-password"
                minlength={8}
              />
              <button 
                type="button"
                class="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-500"
                onclick={() => passwordVisible = !passwordVisible}
              >
                {#if passwordVisible}
                  👁️
                {:else}
                  👁️‍🗨️
                {/if}
              </button>
            </div>
            
            {#if password}
              <div class="mt-2">
                <div class="flex justify-between mb-1">
                  <span class="text-xs">Password strength:</span>
                  <span class="text-xs">{passwordStrength < 3 ? "Weak" : passwordStrength < 5 ? "Good" : "Strong"}</span>
                </div>
                <div class="w-full bg-gray-200 rounded-full h-2">
                  <div 
                    class="h-2 rounded-full {passwordStrength < 3 ? 'bg-red-500' : passwordStrength < 5 ? 'bg-yellow-500' : 'bg-green-500'}"
                    style="width: {passwordStrength * 20}%"
                  ></div>
                </div>
              </div>
            {/if}
          </div>
          
          <div class="form-control mt-4">
            <label for="confirmPassword" class="label">
              <span class="label-text">Confirm Password</span>
            </label>
            <input
              id="confirmPassword"
              type={passwordVisible ? "text" : "password"}
              placeholder="••••••••"
              class="input input-bordered w-full"
              bind:value={confirmPassword}
              required
              autocomplete="new-password"
            />
          </div>
          
          <button class="btn btn-primary w-full mt-6 shadow-solid" type="submit" disabled={isLoading}>
            {#if isLoading}
              <span class="loading loading-spinner loading-sm"></span>
            {:else}
              Create Account
            {/if}
          </button>
        </form>
      {/if}
      
      <!-- Email verification sent stage -->
      {#if currentStage === "verification-sent"}
        <div class="py-4 flex flex-col items-center">
          <div class="w-16 h-16 bg-success/20 rounded-full flex items-center justify-center mb-4">
            <span class="text-2xl">✉️</span>
          </div>
          
          <p class="text-center mb-4">
            We've sent a verification link to <strong>{email}</strong>. Please check your inbox and click the link to continue.
          </p>
          
          <p class="text-sm text-gray-500 mb-4">
            If you don't see the email, check your spam folder or try again with a different email address.
          </p>
          
          <button class="btn btn-outline w-full" onclick={goBack}>
            Use a different email
          </button>
        </div>
      {/if}
    </div>
  </div>
  
  <div class="text-sm text-gray-500">
    By continuing, you agree to our <a href="/terms" class="link">Terms of Service</a> and <a href="/privacy" class="link">Privacy Policy</a>.
  </div>
</div>