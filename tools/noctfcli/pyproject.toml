[project]
name = "noctfcli"
version = "0.1.0"
description = "CLI tool and library for noCTF challenge management"
readme = "README.md"
keywords = ["noctf", "ctf"]
requires-python = ">=3.9"
dependencies = [
    "click>=8.0.0",
    "httpx>=0.25.0",
    "pydantic>=2.0.0",
    "pyyaml>=6.0",
    "rich>=13.0.0",
    "jsonschema>=4.0.0",
]

[project.optional-dependencies]
dev = [
    "ruff>=0.1.0",
    "types-PyYAML>=6.0.0",
]

[project.scripts]
noctfcli = "noctfcli.cli:main"

[project.urls]
Homepage = "https://github.com/noctf-project/noctf"
Repository = "https://github.com/noctf-project/noctf"
Issues = "https://github.com/noctf/noctf-project/issues"
Documentation = "https://github.com/noctf-project/noctf/tree/main/tools/noctfcli"

[tool.hatch.build.targets.wheel]
packages = ["src/noctfcli"]

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/examples",
    "/README.md",
    "/noctf.yaml.schema.json",
]

[tool.ruff]
line-length = 88
target-version = "py39"
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "N",   # pep8-naming
    "YTT", # flake8-2020
    "S",   # flake8-bandit
    "BLE", # flake8-blind-except
    "FBT", # flake8-boolean-trap
    "A",   # flake8-builtins
    "COM", # flake8-commas
    "DTZ", # flake8-datetimez
    "EM",  # flake8-errmsg
    "ISC", # flake8-implicit-str-concat
    "ICN", # flake8-import-conventions
    "G",   # flake8-logging-format
    "PIE", # flake8-pie
    "T20", # flake8-print
    "PT",  # flake8-pytest-style
    "Q",   # flake8-quotes
    "RSE", # flake8-raise
    "RET", # flake8-return
    "SLF", # flake8-self
    "SIM", # flake8-simplify
    "TID", # flake8-tidy-imports
    "TCH", # flake8-type-checking
    "ARG", # flake8-unused-arguments
    "PTH", # flake8-use-pathlib
    "ERA", # eradicate
    "PL",  # pylint
    "TRY", # tryceratops
    "RUF", # ruff-specific rules
]
ignore = [
    "S603",   # subprocess call: check for execution of untrusted input
    "S607",   # starting a process with a partial executable path
    "PLR0913", # too many arguments to function call
    "PLR0912", # too many branches
    "PLR0915", # too many statements
    "PLR0911", # too many return statements
    "TRY003",  # avoid specifying long messages outside the exception class
    "EM101",   # exception must not use a string literal
    "EM102",   # exception must not use an f-string literal
    "PTH123", # Path.open
    "PLR2004", # magic values
]
